#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'pizza_delivery_types'

module PizzaDelivery
  class Client
    include ::Thrift::Client

    def ping()
      send_ping()
      return recv_ping()
    end

    def send_ping()
      send_message('ping', Ping_args)
    end

    def recv_ping()
      result = receive_message(Ping_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'ping failed: unknown result')
    end

    def makeOrder(order)
      send_makeOrder(order)
      return recv_makeOrder()
    end

    def send_makeOrder(order)
      send_message('makeOrder', MakeOrder_args, :order => order)
    end

    def recv_makeOrder()
      result = receive_message(MakeOrder_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'makeOrder failed: unknown result')
    end

    def getOrderById(id)
      send_getOrderById(id)
      return recv_getOrderById()
    end

    def send_getOrderById(id)
      send_message('getOrderById', GetOrderById_args, :id => id)
    end

    def recv_getOrderById()
      result = receive_message(GetOrderById_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getOrderById failed: unknown result')
    end

    def getAllOrders()
      send_getAllOrders()
      return recv_getAllOrders()
    end

    def send_getAllOrders()
      send_message('getAllOrders', GetAllOrders_args)
    end

    def recv_getAllOrders()
      result = receive_message(GetAllOrders_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getAllOrders failed: unknown result')
    end

    def updateOrderStatus(id, status)
      send_updateOrderStatus(id, status)
      return recv_updateOrderStatus()
    end

    def send_updateOrderStatus(id, status)
      send_message('updateOrderStatus', UpdateOrderStatus_args, :id => id, :status => status)
    end

    def recv_updateOrderStatus()
      result = receive_message(UpdateOrderStatus_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'updateOrderStatus failed: unknown result')
    end

    def getAvailablePizzas()
      send_getAvailablePizzas()
      return recv_getAvailablePizzas()
    end

    def send_getAvailablePizzas()
      send_message('getAvailablePizzas', GetAvailablePizzas_args)
    end

    def recv_getAvailablePizzas()
      result = receive_message(GetAvailablePizzas_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getAvailablePizzas failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_ping(seqid, iprot, oprot)
      args = read_args(iprot, Ping_args)
      result = Ping_result.new()
      result.success = @handler.ping()
      write_result(result, oprot, 'ping', seqid)
    end

    def process_makeOrder(seqid, iprot, oprot)
      args = read_args(iprot, MakeOrder_args)
      result = MakeOrder_result.new()
      result.success = @handler.makeOrder(args.order)
      write_result(result, oprot, 'makeOrder', seqid)
    end

    def process_getOrderById(seqid, iprot, oprot)
      args = read_args(iprot, GetOrderById_args)
      result = GetOrderById_result.new()
      result.success = @handler.getOrderById(args.id)
      write_result(result, oprot, 'getOrderById', seqid)
    end

    def process_getAllOrders(seqid, iprot, oprot)
      args = read_args(iprot, GetAllOrders_args)
      result = GetAllOrders_result.new()
      result.success = @handler.getAllOrders()
      write_result(result, oprot, 'getAllOrders', seqid)
    end

    def process_updateOrderStatus(seqid, iprot, oprot)
      args = read_args(iprot, UpdateOrderStatus_args)
      result = UpdateOrderStatus_result.new()
      result.success = @handler.updateOrderStatus(args.id, args.status)
      write_result(result, oprot, 'updateOrderStatus', seqid)
    end

    def process_getAvailablePizzas(seqid, iprot, oprot)
      args = read_args(iprot, GetAvailablePizzas_args)
      result = GetAvailablePizzas_result.new()
      result.success = @handler.getAvailablePizzas()
      write_result(result, oprot, 'getAvailablePizzas', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class Ping_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Ping_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class MakeOrder_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ORDER = 1

    FIELDS = {
      ORDER => {:type => ::Thrift::Types::STRUCT, :name => 'order', :class => ::OrderRequest}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class MakeOrder_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Order}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetOrderById_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ID = 1

    FIELDS = {
      ID => {:type => ::Thrift::Types::I32, :name => 'id'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetOrderById_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Order}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllOrders_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAllOrders_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Order}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateOrderStatus_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ID = 1
    STATUS = 2

    FIELDS = {
      ID => {:type => ::Thrift::Types::I32, :name => 'id'},
      STATUS => {:type => ::Thrift::Types::I32, :name => 'status', :enum_class => ::OrderStatus}
    }

    def struct_fields; FIELDS; end

    def validate
      unless @status.nil? || ::OrderStatus::VALID_VALUES.include?(@status)
        raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field status!')
      end
    end

    ::Thrift::Struct.generate_accessors self
  end

  class UpdateOrderStatus_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Order}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAvailablePizzas_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GetAvailablePizzas_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRUCT, :class => ::Pizza}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

